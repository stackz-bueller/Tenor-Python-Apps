import csv
import requests as r
import io


def csv2dict(url):
	list = []	
	c = r.get(url).content
	file = io.StringIO(c.decode('utf-8'))
	it = csv.DictReader(file)
	for row in it:
		list.append(row)	
	print('Content Successfully Grabbed')
	return list
	
	
def getCSV():	
	url = 'https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+ppd_complaints&filename=ppd_complaints&format=csv&skipfields=cartodb_id,the_geom,the_geom_webmercator'
	holder = csv2dict(url)
	print('Successfully Stored')
	return holder
	
	
def convertData(items):
	newKeys = ['Date', 'District', 'Type of Comp', 'Synopsis']
	keys = ['date_received', 'dist_occurrence', 'general_cap_classification', 'summary']
	list = []
	for item in items:
		d = {}
		for i in range(0, 4):
			if(newKeys[i] == 'Date'):
				holder = item[keys[i]].split()
				d[newKeys[i]] = holder[0]
			else:
				d[newKeys[i]] = item[keys[i]]
		list.append(d)
	return list
	
							
def grab():	
	print('Starting')
	all = getCSV()
	print('\nProof: \n\t', all[0].keys(), '\n\n\n')
	data = convertData(all)
	return data
		
	
def parseThis(sample):
	holder = sample.split()
	dist_num = ''
	dist = ''
	counter = 0
	digitsFound = 0
		
	for i in range(0, 40):
		word = holder[i]
			
		if(word == 'District'):
			dist = holder[i - 1]
			counter += 1
			
		elif(word[-1] == ',' or word[-1] == '.'):
			if(word[:-1] == 'District' or word == 'District'):
				dist = holder[i - 1]
				counter += 1
					
			else:
				dist = 'UNK'
					
	if(dist != 'UNK'):
		for letter in dist:
			if(letter.isdigit()):
				dist_num += letter
				digitsFound += 1
					
		return dist_num
			
	else:
		return dist
			
	
class Complaint():
	
	def __init__(self, values):
		self.Date = values['Date']
		self.District = values['District']
		self.Type = values['Type of Comp']
		self.Synopsis = values['Synopsis']
		self.Officers = []
		
	def to_String(self):
		print('\tDate: ', self.Date, '\n', '\tType of Complaint: ', self.Type, '\n')
		print('\tPolice District: ', self.District, '\n\n', 'Synopsis: ')
		print(self.Synopsis, '\n')
		return ''
	
	def __getitem__(self, index):
		result = self.text[index].upper()
		return result
	
	def __str__(self):
		return self
	
	def correctDist(self, new):
		self.District = new
		return self.District
		
	def appendOfficer(self, off):
		self.Officers.append(off)
		return self.Officers

		
	def print_complaint(o):
		if isinstance(o, str):
			print(o)	
		elif isinstance(o, dict):
			print(o)	
		elif isinstance(o, list):
			print(o)
		elif isinstance(o, float):
			print(o)	
		elif isinstance(o, int):
			print(o)
		elif isinstance(o, Complaint):
			print(o.to_String())
		else:
			print("unprintable object")
		return ''	

def do():
	data = grab()
	holder = []
	count = 0
	
	for this in data:
		comp = Complaint(this)
		holder.append(comp)
		count += 1
		
	print('There are ', count, 'within this file. \n\n', '**' * 88)
	print('\t\t 5 Most Recent Police Complaints')
	print('~' * 88, '\n')
		
	for that in holder[-5:]:
		that.print_complaint()
		
	return holder
	
	
def stats(total):
		
	districts = []
	unk = []
	corrections = []
	
	for i in range(1, 99):
		d = {}
		holder = []
		
		for item in total:
			
			if(item.District == str(i)):
				holder.append(item)
			elif(item.District == '5-'):
				item.correctDist(5)
				corrections.append(item)
			elif(item.District == 'UNK'):
				unk.append(item)
				
		if(len(holder) != 0):
			d[i] = holder
			districts.append(d)
	
	for this in districts:
		
		for key in this:
			print('District Number: ', key, '\n# of Complaints: ', len(this[key]), '\n')
			
	print('Total # of complaints: ', len(total), '\n')
	
	districts.append(corrections)
	districts.append(unk)
		
	print(len(unk))
	
	return districts
	
	
def starter():
	complaints = do()
	holder = []
	newHolder = []
	counter = 0
	count = 0
	
	for comp in complaints:
		if(comp.District == 'UNK'):
			holder.append(comp)
			counter += 1
			
	print('There are ', counter, ' unknown complaints within this file.\n\n')
	
	print('*' * 88)
	print('\t\t 3 Most Recent Unknown Police Complaints')
	print('~' * 44, '\n')
	
	for this in holder[-3:]:
		this.print_complaint()
	
	i = 0
	for unk in holder:
		
		test = parseThis(unk.Synopsis)
		if(test != 'UNK'):
			unk.correctDist('')
			unk.correctDist(test)
			newHolder.append(unk)
			holder.pop(i)
			count += 1
		i += 1
			

def main():
	starter()
	
	
if __name__ == '__main__':
	main()
