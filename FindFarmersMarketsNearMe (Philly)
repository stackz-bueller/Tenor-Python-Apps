import location as l
from math import cos
import csv
import requests as r
import io

#Use this for help storing your data
keys = ['NAME', 'ADDRESS', 'NEIGHBORHOOD', 'TIME', 'DAY', 'MONTHS', 'ACCEPT_SNAP_ACCESS', 'MAJOR_BUS_SUBWAY_ROUTES', '\ufeffX', 'Y']
newKeys = ['Name', 'Address', 'Neighborhood', 'Open', 'Days', 'Months', 'Stamps Accepted', 'Septa', 'Longitude', 'Latitude']
near = []

# Grabs CSV from web and converts it to a dictionary
def csv2dict(url):
	list = []
	c = r.get(url).content
	file = io.StringIO(c.decode('utf-8'))
	it = csv.DictReader(file)
	for row in it:
		list.append(row)
	#Return
	print('Content Successfully Grabbed')
	return list


#Sets URL and runs converter
def getCSV():
	url = 'http://data-phl.opendata.arcgis.com/datasets/0707c1f31e2446e881d680b0a5ee54bc_0.csv'
	
	holder = csv2dict(url)
	print('Successfully Stored')
	return holder

		
#Grabs location using location module, prints the coordinates, and also returns it
def grabLocation():
	l.start_updates()
	loc = l.get_location()
	l.stop_updates()
	
	print('\n','Your coordinates:\n',loc['longitude'], loc['latitude'])
	myLoc = [loc['longitude'], loc['latitude']]
	return myLoc


#Finds Markets inside Geofence
def whosNear(Market, origin, coord, rad):
	global near
	inside = insideCircle(origin, coord,  rad)
		
	if(inside == True):
		near.append(Market)


#Math for Geofence
def insideCircle(origin, point, rad):	
	deltas = []
	mag = 0
	
	deltaX = abs(point[0] - origin[0])
	deltaY = abs(point[1] - origin[1])
	deltas = [deltaX, deltaY]
	
	latLength = (1 / 360) * 24901.55
	lonLength = cos(origin[0]) * 24901.55
	
	truRad = (((rad / latLength) ** 2) + ((rad / lonLength) ** 2)) ** 0.5
	mag = ((deltaX ** 2) + (deltaY ** 2)) ** 0.5
	
	if(mag <= truRad):
		return True
	else:
		return False
		
#Creates Market Class containing information obtained
class Market():
	def __init__(self, values):
		
		self.Name = values['Name']
		self.Long = values['Longitude']
		self.Time = values['Open']
		self.Day = values['Days']
		self.Lat = values['Latitude']
		self.Hood = values['Neighborhood']
		self.Addr = values['Address']
		self.Snap = values['Stamps Accepted']
		self.Septa = values['Septa']
		self.Months = values['Months']
		self.Coord = [float(values['Longitude']), float(values['Latitude'])]
		
	def to_String(self):
		print('\n\tName: ', self.Name, '\n',
		'\tAddress: ', self.Addr, '\n', '\tNeighborhood: ', self.Hood, '\n', '\tMonths Open: ', self.Months,'\n', '\tDays Open: ', self.Day, '\n', '\tTime Open: ', self.Time, '\n', '\tBuses and Subs Nearby: ', self.Septa, '\n', '\tStamps Accepted: ', self.Snap, '\n', '\n', '\tCoordinates: ', self.Coord, '\n')
		return ''
	
	def __getitem__(self, index):
		result = self.text[index].upper()
		return result
	
	def __str__(self):
		return self	
	
	def print_market(o):
		if isinstance(o, str):
			print(o)
		elif isinstance(o, dict):
			print(o)
		elif isinstance(o, list):
			print(o)
		elif isinstance(o, float):
			print(o)
		elif isinstance(o, int):
			print(o)
		elif isinstance(o, Market):
			print(o.to_String())
		else:
			print("unprintable object")
		
		return ''
		
#Builds Market Objects
def builder():
	global newKeys, keys
	list = getCSV()
	newList = []
	
	for this in list:
		d = {newKeys[j]: this[keys[j]] for j in range(0, len(keys))}
		newList.append(d)
	return newList
	
def convertMarketData(gathered):
	holder = []
	
	for this in gathered:
		data = Market(this)
		holder.append(data)
	return holder
	
# Main Method that runs program
def main():
	holder = []
	
	Markets = builder()
	database = convertMarketData(Markets)
	here = grabLocation()
	
	print('Market List Successfully Created')
	rad = float(input('\nPlease Enter the radius of fence in miles: '))
	
	for market in database:
		lon = float(market.Long)
		lat = float(market.Lat)
		coord = [lon, lat]
		whosNear(market, here, market.Coord, rad)
			
	if (len(near) == 0):
		print('\nThere are no farmer\'s markets within your radius')
		
	else:
		for one in near:
			one.print_market()
						
						
if __name__ == '__main__':
	main()
